
" Options that should occur early {{{
" a more efficient leader characters
let mapleader="," 
let maplocalleader=","
" remap comma
nnoremap <c-e> , 
vnoremap <c-e> ,

set nocompatible
syntax enable "enable syntax highlighting 
filetype on "enable file type detection
filetype plugin on 
filetype indent on 
"}}}

" Backup behaviour {{{
" prevent backup files from clutering up directories
cd ~/documents
set backup
set backupdir=~/vimfiles/backup
set directory=~/vimfiles/tmp
set autowrite "automatically save when buffer changes
set history=400 "have a long history of commands
" autocmd BufLeave,FocusLost silent! wall "consider auto-saving on buffer exit
"}}}

" Visual Appearance {{{
" colorscheme = oceandeep
" colorscheme inkpot "Color scheme
colorscheme molokai
set tabstop=4 "set tabs to 4 spaces.
set expandtab "convert tabs to spaces
set shiftwidth=4 "spaces used for auto indent
set hidden " allow buffers to be not displayed but still open
set wildmenu " facilitate autocompletion with tabbed search on command line
set guifont=courier_new:h10:b " Better Font
set ruler "show the cursor position all the time
"set ch=2 "make command line two lines high
set scrolloff=3 "keep the cursor three lines below top
set colorcolumn=85 "add a vertical line to indicate desired wrap point
set guioptions-=T "remove toolbar
set guicursor=a:blinkon0 " remove blinking cursor

" Set the status line from Derek Wyatt
set stl=%f\ %m\ %r\ Line:%l/%L[%p%%]\ Col:%c\ Buf:%n\ [%b][0x%B]
set laststatus=2 " always include status line even if only one window
set mousehide " hide mouse when typing
set shellslash  " desired by latex-suite
"}}}
                                               
" Assorted Behaviour {{{
set backspace=indent,eol,start  " backspace for dummys
set shortmess=atI " experimenting with fewer prompts
"edit vimrc and source vimrc
nmap <silent> <Leader>ev :e $HOME/vimfiles/myvimrc<cr>
nmap <silent> <Leader>sv :so $MYVIMRC<cr>
set virtualedit=all " allows cursor to go anywhere in file
set spl=en_au spell " Activate Australian English Spell Checking
set nospell " Disable spell checking by default
" Toggle spelling shortcut key
map <Leader>s :setlocal spell!<CR>
set showcmd " Show typing as a 
set number " Show line numbers
set hlsearch "show matches highlighted
set incsearch " show search matches while typing
set ignorecase " Ignore case when search
set smartcase "except when capital letters used
set tw=80 "number of columns before file auto-wraps
"set selection=exclusive
" maximise on start
au GUIEnter * simalt ~x
 
" remove highlights
nmap <silent> <leader>n :silent nohlsearch<CR>

" Make Ctrl+Backspace delete previous word in Insert Mode
:imap <C-BS> <C-W>



" Change working directory to that of open 
map <Leader>cd :cd %:p:h<CR>

" Easy Session Save (ss) or Session Load (sl)
map <Leader>ss :mksession! ~/vim_session <cr> 
map <Leader>sl :source ~/vim_session <cr>     


" Open Web browser
"function! Browser ()
  "let line = getline (".")
  "let line = matchstr (line, "\%(http://\|www\.\)[^ ,;\t]*")
  "exec "!chrome ".line
"endfunction
"map <Leader>w :call Browser ()<CR>

" from http://stackoverflow.com/questions/3909350/what-are-ways-to-reduce-mode-errors-while-learning-vim/3909391#3909391
" Give greater visual feedback about when in insert mode
" autocmd InsertEnter * set cursorline 
" autocmd InsertLeave * set nocursorline
"}}}

" Assorted Plugins {{{
"Toggle the file explorer program Nerd Tree.
map <F2> :NERDTreeToggle<CR>
" }}}

" R-Plugin Customisations {{{
let vimrplugin_r_args = "--sdi --no-save --internet2 --quiet"
let vimrplugin_editor_w = 88
let vimrplugin_help_w = 88
let r_syntax_folding = 1 "enable folding


let vimrplugin_conqueplugin = 0 " Try using Standard RGui for a while

" Attempt to make console more responsive
"let vimrplugin_conquevsplit = 1 "activate console vertically
"let vimrplugin_conquesleep = 500
"let ConqueTerm_CWInsert = 1
"let ConqueTerm_Color = 0
"let ConqueTerm_ReadUnfocused = 1 
"nmap <F5> :call RScrollTerm()<CR>

" custom commands: 
" Select rnw R code block
map <LocalLeader>bs ?>>=<Enter>jV/^@<Enter>k
map! <LocalLeader>bs <Esc>?>>=<Enter>jV/^@<Enter>k
"}}}

" Command line keys {{{
" allow command line editing like emacs from Derek Wyatt
"cnoremap <C-A>      <Home>
"cnoremap <C-B>      <Left>
"cnoremap <C-E>      <End>
"cnoremap <C-F>      <Right>
"cnoremap <C-N>      <End>
"cnoremap <C-P>      <Up>
"cnoremap <ESC>b     <S-Left>
"cnoremap <ESC><C-B> <S-Left>
"cnoremap <ESC>f     <S-Right>
"cnoremap <ESC><C-F> <S-Right>
"cnoremap <ESC><C-H> <C-W>
" }}}

" Nerd Tree {{{
let NERDTreeShowBookmarks=1 " Show bookmarks on startup
"}}}

" Latex-Suite {{{
let g:tex_flavor='latex'  " ensure that files with tex extension load latex-suite
let g:Tex_DefaultTargetFormat='pdf' " compile to pdf by default

"}}}

" FuzzyFinding {{{
" nmap <Leader>fb :FuzzyFinderBuffer<CR>
" nmap <Leader>ff :FuzzyFinderFile<CR>
" nmap <Leader>ft :FuzzyFinderTag<CR>
" }}}

" cygwin customisations {{{
" set shell=C:/cygwin/bin/bash
" set shellcmdflag=--login\ -c
" set shellxquote=\"
"}}}

" voom customiations {{{
let g:voom_tree_width = 50 " default is 50 columns wide
"
" }}}


" modified version of mswin.vim
" I'm gradually removing features that otherwise cause a conflict,
source $HOME/vimfiles/mswin.vim

" Built in Diff function {{{
set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
"}}}

                              
" Markdown customisations {{{
function! MarkdownLevel()
    if getline(v:lnum) =~ '^# .*$'
        return ">1"
    endif
    if getline(v:lnum) =~ '^## .*$'
        return ">2"
    endif
    if getline(v:lnum) =~ '^### .*$'
        return ">3"
    endif
    if getline(v:lnum) =~ '^#### .*$'
        return ">4"
    endif
    if getline(v:lnum) =~ '^##### .*$'
        return ">5"
    endif
    if getline(v:lnum) =~ '^###### .*$'
        return ">6"
    endif
    return "=" 
endfunction

au BufEnter *.md setlocal foldexpr=MarkdownLevel()  
au BufEnter *.md setlocal foldmethod=expr     
au BufEnter *.md setlocal autoindent
"}}}
"
"" vimoutliner {{{
" adopt a smaller indentation
au BufEnter *.otl map! <buffer> <S-Tab> <C-D>
" au BufEnter *.otl map! <buffer> <Tab> <C-T>    
au BufEnter *.otl map <buffer> <S-Tab> <<
" au BufEnter *.otl map <buffer> <Tab> >>    

au BufEnter *.otl setlocal tabstop=2
au BufEnter *.otl setlocal shiftwidth=2
"}}}
"
"MRU {{{
nmap <Leader>m :MRU<CR>
"}}}
"

" speed up scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
